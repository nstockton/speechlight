{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"Mozilla Public License Version 2.0 \u00b6 1. Definitions \u00b6 1.1. \u201cContributor\u201d means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \u201cContributor Version\u201d means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \u201cContribution\u201d means Covered Software of a particular Contributor. 1.4. \u201cCovered Software\u201d means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \u201cIncompatible With Secondary Licenses\u201d means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \u201cExecutable Form\u201d means any form of the work other than Source Code Form. 1.7. \u201cLarger Work\u201d means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \u201cLicense\u201d means this document. 1.9. \u201cLicensable\u201d means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \u201cModifications\u201d means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \u201cPatent Claims\u201d of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \u201cSecondary License\u201d means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \u201cSource Code Form\u201d means the form of the work preferred for making modifications. 1.14. \u201cYou\u201d (or \u201cYour\u201d) means an individual or a legal entity exercising rights under this License. For legal entities, \u201cYou\u201d includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \u201ccontrol\u201d means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2. License Grants and Conditions \u00b6 2.1. Grants \u00b6 Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date \u00b6 The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope \u00b6 The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses \u00b6 No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation \u00b6 Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use \u00b6 This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions \u00b6 Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1. 3. Responsibilities \u00b6 3.1. Distribution of Source Form \u00b6 All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form \u00b6 If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work \u00b6 You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices \u00b6 You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms \u00b6 You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction. 4. Inability to Comply Due to Statute or Regulation \u00b6 If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. 5. Termination \u00b6 5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. 6. Disclaimer of Warranty \u00b6 Covered Software is provided under this License on an \u201cas is\u201d basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Covered Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Covered Software is with You. Should any Covered Software prove defective in any respect, You (not any Contributor) assume the cost of any necessary servicing, repair, or correction. This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is authorized under this License except under this disclaimer. 7. Limitation of Liability \u00b6 Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall any Contributor, or anyone who distributes Covered Software as permitted above, be liable to You for any direct, indirect, special, incidental, or consequential damages of any character including, without limitation, damages for lost profits, loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to You. 8. Litigation \u00b6 Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims. 9. Miscellaneous \u00b6 This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor. 10. Versions of the License \u00b6 10.1. New Versions \u00b6 Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions \u00b6 You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions \u00b6 If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses \u00b6 If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached. Exhibit A - Source Code Form License Notice \u00b6 This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership. Exhibit B - \u201cIncompatible With Secondary Licenses\u201d Notice \u00b6 This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"License"},{"location":"license/#mozilla-public-license-version-20","text":"","title":"Mozilla Public License Version 2.0"},{"location":"license/#1-definitions","text":"1.1. \u201cContributor\u201d means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \u201cContributor Version\u201d means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \u201cContribution\u201d means Covered Software of a particular Contributor. 1.4. \u201cCovered Software\u201d means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \u201cIncompatible With Secondary Licenses\u201d means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \u201cExecutable Form\u201d means any form of the work other than Source Code Form. 1.7. \u201cLarger Work\u201d means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \u201cLicense\u201d means this document. 1.9. \u201cLicensable\u201d means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \u201cModifications\u201d means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \u201cPatent Claims\u201d of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \u201cSecondary License\u201d means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \u201cSource Code Form\u201d means the form of the work preferred for making modifications. 1.14. \u201cYou\u201d (or \u201cYour\u201d) means an individual or a legal entity exercising rights under this License. For legal entities, \u201cYou\u201d includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \u201ccontrol\u201d means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.","title":"1. Definitions"},{"location":"license/#2-license-grants-and-conditions","text":"","title":"2. License Grants and Conditions"},{"location":"license/#21-grants","text":"Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.","title":"2.1. Grants"},{"location":"license/#22-effective-date","text":"The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.","title":"2.2. Effective Date"},{"location":"license/#23-limitations-on-grant-scope","text":"The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).","title":"2.3. Limitations on Grant Scope"},{"location":"license/#24-subsequent-licenses","text":"No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).","title":"2.4. Subsequent Licenses"},{"location":"license/#25-representation","text":"Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.","title":"2.5. Representation"},{"location":"license/#26-fair-use","text":"This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.","title":"2.6. Fair Use"},{"location":"license/#27-conditions","text":"Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.","title":"2.7. Conditions"},{"location":"license/#3-responsibilities","text":"","title":"3. Responsibilities"},{"location":"license/#31-distribution-of-source-form","text":"All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form.","title":"3.1. Distribution of Source Form"},{"location":"license/#32-distribution-of-executable-form","text":"If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License.","title":"3.2. Distribution of Executable Form"},{"location":"license/#33-distribution-of-a-larger-work","text":"You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).","title":"3.3. Distribution of a Larger Work"},{"location":"license/#34-notices","text":"You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.","title":"3.4. Notices"},{"location":"license/#35-application-of-additional-terms","text":"You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.","title":"3.5. Application of Additional Terms"},{"location":"license/#4-inability-to-comply-due-to-statute-or-regulation","text":"If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.","title":"4. Inability to Comply Due to Statute or Regulation"},{"location":"license/#5-termination","text":"5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.","title":"5. Termination"},{"location":"license/#6-disclaimer-of-warranty","text":"Covered Software is provided under this License on an \u201cas is\u201d basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Covered Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Covered Software is with You. Should any Covered Software prove defective in any respect, You (not any Contributor) assume the cost of any necessary servicing, repair, or correction. This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is authorized under this License except under this disclaimer.","title":"6. Disclaimer of Warranty"},{"location":"license/#7-limitation-of-liability","text":"Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall any Contributor, or anyone who distributes Covered Software as permitted above, be liable to You for any direct, indirect, special, incidental, or consequential damages of any character including, without limitation, damages for lost profits, loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party's negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to You.","title":"7. Limitation of Liability"},{"location":"license/#8-litigation","text":"Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims.","title":"8. Litigation"},{"location":"license/#9-miscellaneous","text":"This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.","title":"9. Miscellaneous"},{"location":"license/#10-versions-of-the-license","text":"","title":"10. Versions of the License"},{"location":"license/#101-new-versions","text":"Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.","title":"10.1. New Versions"},{"location":"license/#102-effect-of-new-versions","text":"You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.","title":"10.2. Effect of New Versions"},{"location":"license/#103-modified-versions","text":"If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).","title":"10.3. Modified Versions"},{"location":"license/#104-distributing-source-code-form-that-is-incompatible-with-secondary-licenses","text":"If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.","title":"10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses"},{"location":"license/#exhibit-a-source-code-form-license-notice","text":"This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership.","title":"Exhibit A - Source Code Form License Notice"},{"location":"license/#exhibit-b-incompatible-with-secondary-licenses-notice","text":"This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"Exhibit B - \u201cIncompatible With Secondary Licenses\u201d Notice"},{"location":"api/","text":"Speechlight API \u00b6 Automatically generated API reference. Speechlight \u00b6 Base Speech Darwin Speech Dummy Speech Module Misc Utilities Windows Speech","title":"API Index"},{"location":"api/#speechlight-api","text":"Automatically generated API reference.","title":"Speechlight API"},{"location":"api/#speechlight","text":"Base Speech Darwin Speech Dummy Speech Module Misc Utilities Windows Speech","title":"Speechlight"},{"location":"api/base/","text":"Module speechlight.base \u00b6 Class BaseSpeech( ABC ) \u00b6 Source code in speechlight/base.py class BaseSpeech ( ABC ): @abstractmethod def braille ( self , text : str ) -> None : \"\"\" Brailles text. Args: text: The text to be brailled. \"\"\" @abstractmethod def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks and brailles text. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" @abstractmethod def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks text. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" @abstractmethod def silence ( self ) -> None : \"\"\"Cancels speech and flushes the speech buffer.\"\"\" @abstractmethod def speaking ( self ) -> bool : \"\"\" Determines if text is currently being spoken. Returns: True if text is currently being spoken, False otherwise. \"\"\" Method braille ( self , text ) \u00b6 Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/base.py @abstractmethod def braille ( self , text : str ) -> None : \"\"\" Brailles text. Args: text: The text to be brailled. \"\"\" Method output ( self , text , interrupt = None ) \u00b6 Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/base.py @abstractmethod def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks and brailles text. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" Method say ( self , text , interrupt = None ) \u00b6 Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/base.py @abstractmethod def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks text. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" Method silence ( self ) \u00b6 Cancels speech and flushes the speech buffer. Source code in speechlight/base.py @abstractmethod def silence ( self ) -> None : \"\"\"Cancels speech and flushes the speech buffer.\"\"\" Method speaking ( self ) \u00b6 Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/base.py @abstractmethod def speaking ( self ) -> bool : \"\"\" Determines if text is currently being spoken. Returns: True if text is currently being spoken, False otherwise. \"\"\"","title":"base.py"},{"location":"api/base/#speechlight.base","text":"","title":"base"},{"location":"api/base/#speechlight.base.BaseSpeech","text":"Source code in speechlight/base.py class BaseSpeech ( ABC ): @abstractmethod def braille ( self , text : str ) -> None : \"\"\" Brailles text. Args: text: The text to be brailled. \"\"\" @abstractmethod def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks and brailles text. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" @abstractmethod def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks text. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" @abstractmethod def silence ( self ) -> None : \"\"\"Cancels speech and flushes the speech buffer.\"\"\" @abstractmethod def speaking ( self ) -> bool : \"\"\" Determines if text is currently being spoken. Returns: True if text is currently being spoken, False otherwise. \"\"\"","title":"BaseSpeech"},{"location":"api/base/#speechlight.base.BaseSpeech.braille","text":"Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/base.py @abstractmethod def braille ( self , text : str ) -> None : \"\"\" Brailles text. Args: text: The text to be brailled. \"\"\"","title":"braille()"},{"location":"api/base/#speechlight.base.BaseSpeech.output","text":"Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/base.py @abstractmethod def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks and brailles text. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\"","title":"output()"},{"location":"api/base/#speechlight.base.BaseSpeech.say","text":"Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/base.py @abstractmethod def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speaks text. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\"","title":"say()"},{"location":"api/base/#speechlight.base.BaseSpeech.silence","text":"Cancels speech and flushes the speech buffer. Source code in speechlight/base.py @abstractmethod def silence ( self ) -> None : \"\"\"Cancels speech and flushes the speech buffer.\"\"\"","title":"silence()"},{"location":"api/base/#speechlight.base.BaseSpeech.speaking","text":"Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/base.py @abstractmethod def speaking ( self ) -> bool : \"\"\" Determines if text is currently being spoken. Returns: True if text is currently being spoken, False otherwise. \"\"\"","title":"speaking()"},{"location":"api/darwin/","text":"Module speechlight.darwin \u00b6 Class Speech( BaseSpeech ) \u00b6 Source code in speechlight/darwin.py class Speech ( BaseSpeech ): def __init__ ( self ) -> None : # pragma: no cover if sys . platform == \"darwin\" : # Allocate and initialize the default TTS. self . darwin = NSSpeechSynthesizer . alloc () . init () else : self . darwin = MockNSSpeechSynthesizer . alloc () . init () def braille ( self , text : str ) -> None : pass def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text ) def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () self . darwin . startSpeakingString_ ( text ) def silence ( self ) -> None : self . darwin . stopSpeaking () def speaking ( self ) -> bool : return bool ( self . darwin . isSpeaking ()) Method braille ( self , text ) \u00b6 Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/darwin.py def braille ( self , text : str ) -> None : pass Method output ( self , text , interrupt = None ) \u00b6 Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/darwin.py def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text ) Method say ( self , text , interrupt = None ) \u00b6 Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/darwin.py def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () self . darwin . startSpeakingString_ ( text ) Method silence ( self ) \u00b6 Cancels speech and flushes the speech buffer. Source code in speechlight/darwin.py def silence ( self ) -> None : self . darwin . stopSpeaking () Method speaking ( self ) \u00b6 Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/darwin.py def speaking ( self ) -> bool : return bool ( self . darwin . isSpeaking ())","title":"darwin.py"},{"location":"api/darwin/#speechlight.darwin","text":"","title":"darwin"},{"location":"api/darwin/#speechlight.darwin.Speech","text":"Source code in speechlight/darwin.py class Speech ( BaseSpeech ): def __init__ ( self ) -> None : # pragma: no cover if sys . platform == \"darwin\" : # Allocate and initialize the default TTS. self . darwin = NSSpeechSynthesizer . alloc () . init () else : self . darwin = MockNSSpeechSynthesizer . alloc () . init () def braille ( self , text : str ) -> None : pass def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text ) def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () self . darwin . startSpeakingString_ ( text ) def silence ( self ) -> None : self . darwin . stopSpeaking () def speaking ( self ) -> bool : return bool ( self . darwin . isSpeaking ())","title":"Speech"},{"location":"api/darwin/#speechlight.darwin.Speech.braille","text":"Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/darwin.py def braille ( self , text : str ) -> None : pass","title":"braille()"},{"location":"api/darwin/#speechlight.darwin.Speech.output","text":"Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/darwin.py def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text )","title":"output()"},{"location":"api/darwin/#speechlight.darwin.Speech.say","text":"Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/darwin.py def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () self . darwin . startSpeakingString_ ( text )","title":"say()"},{"location":"api/darwin/#speechlight.darwin.Speech.silence","text":"Cancels speech and flushes the speech buffer. Source code in speechlight/darwin.py def silence ( self ) -> None : self . darwin . stopSpeaking ()","title":"silence()"},{"location":"api/darwin/#speechlight.darwin.Speech.speaking","text":"Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/darwin.py def speaking ( self ) -> bool : return bool ( self . darwin . isSpeaking ())","title":"speaking()"},{"location":"api/dummy/","text":"Module speechlight.dummy \u00b6 Class Speech( BaseSpeech ) \u00b6 Source code in speechlight/dummy.py class Speech ( BaseSpeech ): def braille ( self , text : str ) -> None : pass def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text ) def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () def silence ( self ) -> None : pass def speaking ( self ) -> bool : return False Method braille ( self , text ) \u00b6 Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/dummy.py def braille ( self , text : str ) -> None : pass Method output ( self , text , interrupt = None ) \u00b6 Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/dummy.py def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text ) Method say ( self , text , interrupt = None ) \u00b6 Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/dummy.py def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () Method silence ( self ) \u00b6 Cancels speech and flushes the speech buffer. Source code in speechlight/dummy.py def silence ( self ) -> None : pass Method speaking ( self ) \u00b6 Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/dummy.py def speaking ( self ) -> bool : return False","title":"dummy.py"},{"location":"api/dummy/#speechlight.dummy","text":"","title":"dummy"},{"location":"api/dummy/#speechlight.dummy.Speech","text":"Source code in speechlight/dummy.py class Speech ( BaseSpeech ): def braille ( self , text : str ) -> None : pass def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text ) def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence () def silence ( self ) -> None : pass def speaking ( self ) -> bool : return False","title":"Speech"},{"location":"api/dummy/#speechlight.dummy.Speech.braille","text":"Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/dummy.py def braille ( self , text : str ) -> None : pass","title":"braille()"},{"location":"api/dummy/#speechlight.dummy.Speech.output","text":"Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/dummy.py def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : self . say ( text , interrupt ) self . braille ( text )","title":"output()"},{"location":"api/dummy/#speechlight.dummy.Speech.say","text":"Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/dummy.py def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if interrupt : self . silence ()","title":"say()"},{"location":"api/dummy/#speechlight.dummy.Speech.silence","text":"Cancels speech and flushes the speech buffer. Source code in speechlight/dummy.py def silence ( self ) -> None : pass","title":"silence()"},{"location":"api/dummy/#speechlight.dummy.Speech.speaking","text":"Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/dummy.py def speaking ( self ) -> bool : return False","title":"speaking()"},{"location":"api/utils/","text":"Module speechlight.utils \u00b6 Function get_directory_path ( * args ) \u00b6 Retrieves the path of the directory where the program is located. Parameters: Name Type Description Default *args str Positional arguments to be passed to os.join after the directory path. () Returns: Type Description str The path. Source code in speechlight/utils.py def get_directory_path ( * args : str ) -> str : \"\"\" Retrieves the path of the directory where the program is located. Args: *args: Positional arguments to be passed to os.join after the directory path. Returns: The path. \"\"\" if is_frozen (): path = os . path . dirname ( sys . executable ) else : path = os . path . join ( os . path . dirname ( __file__ )) return os . path . realpath ( os . path . join ( path , * args )) Function get_freezer () \u00b6 Determines the name of the library used to freeze the code. Note https://github.com/blackmagicgirl/ktools/blob/master/ktools/utils.py Returns: Type Description Union[str, None] The name of the library or None. Source code in speechlight/utils.py def get_freezer () -> Union [ str , None ]: \"\"\" Determines the name of the library used to freeze the code. Note: https://github.com/blackmagicgirl/ktools/blob/master/ktools/utils.py Returns: The name of the library or None. \"\"\" frozen : Union [ str , bool , None ] = getattr ( sys , \"frozen\" , None ) if frozen and hasattr ( sys , \"_MEIPASS\" ): return \"pyinstaller\" elif frozen is True : return \"cx_freeze\" elif frozen in ( \"windows_exe\" , \"console_exe\" , \"dll\" ): return \"py2exe\" elif frozen == \"macosx_app\" : return \"py2app\" elif hasattr ( sys , \"importers\" ): return \"old_py2exe\" elif _imp . is_frozen ( \"__main__\" ): return \"tools/freeze\" elif isinstance ( frozen , str ): return f \"unknown { frozen } \" return None Function is_frozen () \u00b6 Determines whether the program is running from a frozen copy or from source. Returns: Type Description bool True if frozen, False otherwise. Source code in speechlight/utils.py def is_frozen () -> bool : \"\"\" Determines whether the program is running from a frozen copy or from source. Returns: True if frozen, False otherwise. \"\"\" return bool ( get_freezer ())","title":"utils.py"},{"location":"api/utils/#speechlight.utils","text":"","title":"utils"},{"location":"api/utils/#speechlight.utils.get_directory_path","text":"Retrieves the path of the directory where the program is located. Parameters: Name Type Description Default *args str Positional arguments to be passed to os.join after the directory path. () Returns: Type Description str The path. Source code in speechlight/utils.py def get_directory_path ( * args : str ) -> str : \"\"\" Retrieves the path of the directory where the program is located. Args: *args: Positional arguments to be passed to os.join after the directory path. Returns: The path. \"\"\" if is_frozen (): path = os . path . dirname ( sys . executable ) else : path = os . path . join ( os . path . dirname ( __file__ )) return os . path . realpath ( os . path . join ( path , * args ))","title":"get_directory_path()"},{"location":"api/utils/#speechlight.utils.get_freezer","text":"Determines the name of the library used to freeze the code. Note https://github.com/blackmagicgirl/ktools/blob/master/ktools/utils.py Returns: Type Description Union[str, None] The name of the library or None. Source code in speechlight/utils.py def get_freezer () -> Union [ str , None ]: \"\"\" Determines the name of the library used to freeze the code. Note: https://github.com/blackmagicgirl/ktools/blob/master/ktools/utils.py Returns: The name of the library or None. \"\"\" frozen : Union [ str , bool , None ] = getattr ( sys , \"frozen\" , None ) if frozen and hasattr ( sys , \"_MEIPASS\" ): return \"pyinstaller\" elif frozen is True : return \"cx_freeze\" elif frozen in ( \"windows_exe\" , \"console_exe\" , \"dll\" ): return \"py2exe\" elif frozen == \"macosx_app\" : return \"py2app\" elif hasattr ( sys , \"importers\" ): return \"old_py2exe\" elif _imp . is_frozen ( \"__main__\" ): return \"tools/freeze\" elif isinstance ( frozen , str ): return f \"unknown { frozen } \" return None","title":"get_freezer()"},{"location":"api/utils/#speechlight.utils.is_frozen","text":"Determines whether the program is running from a frozen copy or from source. Returns: Type Description bool True if frozen, False otherwise. Source code in speechlight/utils.py def is_frozen () -> bool : \"\"\" Determines whether the program is running from a frozen copy or from source. Returns: True if frozen, False otherwise. \"\"\" return bool ( get_freezer ())","title":"is_frozen()"},{"location":"api/windows/","text":"Module speechlight.windows \u00b6 Class Speech( BaseSpeech ) \u00b6 Source code in speechlight/windows.py class Speech ( BaseSpeech ): def __init__ ( self ) -> None : # pragma: no cover self . _sapi : Optional [ Any ] = None self . _jfw : Optional [ Any ] = None if sys . platform == \"win32\" : self . find_window : ctypes . _NamedFuncPointer = ctypes . WinDLL ( \"user32\" ) . FindWindowW self . find_window . argtypes = [ ctypes . c_wchar_p , ctypes . c_wchar_p ] self . find_window . restype = ctypes . c_void_p self . nvda : ctypes . WinDLL self . sa : ctypes . WinDLL if SYSTEM_ARCHITECTURE == \"32bit\" : self . nvda = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"nvdaControllerClient32.dll\" ) ) self . sa = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"SAAPI32.dll\" )) else : self . nvda = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"nvdaControllerClient64.dll\" ) ) self . sa = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"SAAPI64.dll\" )) self . nvda . nvdaController_brailleMessage . argtypes = ( ctypes . c_wchar_p ,) self . nvda . nvdaController_speakText . argtypes = ( ctypes . c_wchar_p ,) self . sa . SA_BrlShowTextW . argtypes = ( ctypes . c_wchar_p ,) self . sa . SA_SayW . argtypes = ( ctypes . c_wchar_p ,) else : self . find_window : Callable [ ... , None ] = lambda * args : None self . nvda = MockNVDA () self . sa = MockSA () @property def sapi ( self ) -> Any : # type: ignore[misc] # pragma: no cover \"\"\"The SAPI COM object.\"\"\" if sys . platform == \"win32\" : with suppress ( ComError ): self . _sapi = win32com . client . Dispatch ( \"SAPI.SpVoice\" ) return self . _sapi @property def jfw ( self ) -> Any : # type: ignore[misc] # pragma: no cover \"\"\"The JFW COM object.\"\"\" if sys . platform == \"win32\" : with suppress ( ComError ): self . _jfw = win32com . client . Dispatch ( \"FreedomSci.JawsApi\" ) return self . _jfw def jfw_braille ( self , text : str ) -> None : \"\"\" Brailles text using JFW. Args: text: The text to braille. \"\"\" self . jfw_output ( text , braille = True ) def jfw_output ( self , text : str , braille : Optional [ bool ] = None , speak : Optional [ bool ] = None , interrupt : Optional [ bool ] = None , ) -> None : \"\"\" Outputs text using JFW. Args: text: The output text. braille: Output text in braille. speak: Output text using speech. interrupt: True if the speech should be silenced before speaking. \"\"\" jfw = self . jfw if jfw is not None : if speak : jfw . SayString ( text , int ( bool ( interrupt ))) if braille : jfw . RunFunction ( 'BrailleString(\" {text} \")' . format ( text = text . replace ( '\"' , \"'\" ))) def jfw_running ( self ) -> bool : \"\"\" Determines if JFW is running. Returns: True if JFW is running, False otherwise. \"\"\" return bool ( self . find_window ( \"JFWUI2\" , None )) def jfw_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using JFW. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" self . jfw_output ( text , speak = True , interrupt = interrupt ) def jfw_silence ( self ) -> None : \"\"\"Cancels JFW speech and flushes the speech buffer.\"\"\" jfw = self . jfw if jfw is not None : jfw . StopSpeech () def nvda_braille ( self , text : str ) -> None : \"\"\" Brailles text using NVDA. Args: text: The text to braille. \"\"\" self . nvda . nvdaController_brailleMessage ( text ) def nvda_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using NVDA. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . nvda_say ( text , interrupt ) self . nvda_braille ( text ) def nvda_running ( self ) -> bool : \"\"\" Determines if NVDA is running. Returns: True if NVDA is running, False otherwise. \"\"\" return bool ( self . nvda . nvdaController_testIfRunning () == 0 ) def nvda_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using NVDA. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . nvda_silence () self . nvda . nvdaController_speakText ( text ) def nvda_silence ( self ) -> None : \"\"\"Cancels NVDA speech and flushes the speech buffer.\"\"\" self . nvda . nvdaController_cancelSpeech () def sa_braille ( self , text : str ) -> None : \"\"\" Brailles text using System Access. Args: text: The text to braille. \"\"\" self . sa . SA_BrlShowTextW ( text ) def sa_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using System Access. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . sa_say ( text , interrupt ) self . sa_braille ( text ) def sa_running ( self ) -> bool : \"\"\" Determines if System Access is running. Returns: True if System Access is running, False otherwise. \"\"\" return bool ( self . sa . SA_IsRunning ()) def sa_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using System Access. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . sa_silence () self . sa . SA_SayW ( text ) def sa_silence ( self ) -> None : \"\"\"Cancels System Access speech and flushes the speech buffer.\"\"\" self . sa . SA_StopAudio () def sapi_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using SAPI. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if self . sapi is not None : if interrupt : self . sapi . Speak ( text , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) else : self . sapi . Speak ( text , SPF_ASYNC | SPF_IS_NOT_XML ) def sapi_silence ( self ) -> None : \"\"\"Cancels SAPI speech and flushes the speech buffer.\"\"\" if self . sapi is not None : self . sapi . Speak ( \"\" , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) def braille ( self , text : str ) -> None : if self . nvda_running (): self . nvda_braille ( text ) elif self . sa_running (): self . sa_braille ( text ) elif self . jfw_running (): self . jfw_braille ( text ) def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_output ( text , interrupt ) elif self . sa_running (): self . sa_output ( text , interrupt ) elif self . jfw_running (): self . jfw_output ( text , braille = True , speak = True , interrupt = interrupt ) else : self . sapi_say ( text , interrupt ) def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_say ( text , interrupt ) elif self . sa_running (): self . sa_say ( text , interrupt ) elif self . jfw_running (): self . jfw_say ( text , interrupt ) else : self . sapi_say ( text , interrupt ) def silence ( self ) -> None : if self . nvda_running (): self . nvda_silence () elif self . sa_running (): self . sa_silence () elif self . jfw_running (): self . jfw_silence () else : self . sapi_silence () def speaking ( self ) -> bool : if self . nvda_running () or self . sa_running () or self . jfw_running (): # None of the screen reader APIs support retrieving speaking status. return False elif self . sapi is not None : return bool ( self . sapi . Status . RunningState != 1 ) return False Attribute jfw : Any property readonly \u00b6 The JFW COM object. Attribute sapi : Any property readonly \u00b6 The SAPI COM object. Method braille ( self , text ) \u00b6 Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/windows.py def braille ( self , text : str ) -> None : if self . nvda_running (): self . nvda_braille ( text ) elif self . sa_running (): self . sa_braille ( text ) elif self . jfw_running (): self . jfw_braille ( text ) Method jfw_braille ( self , text ) \u00b6 Brailles text using JFW. Parameters: Name Type Description Default text str The text to braille. required Source code in speechlight/windows.py def jfw_braille ( self , text : str ) -> None : \"\"\" Brailles text using JFW. Args: text: The text to braille. \"\"\" self . jfw_output ( text , braille = True ) Method jfw_output ( self , text , braille = None , speak = None , interrupt = None ) \u00b6 Outputs text using JFW. Parameters: Name Type Description Default text str The output text. required braille Optional[bool] Output text in braille. None speak Optional[bool] Output text using speech. None interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def jfw_output ( self , text : str , braille : Optional [ bool ] = None , speak : Optional [ bool ] = None , interrupt : Optional [ bool ] = None , ) -> None : \"\"\" Outputs text using JFW. Args: text: The output text. braille: Output text in braille. speak: Output text using speech. interrupt: True if the speech should be silenced before speaking. \"\"\" jfw = self . jfw if jfw is not None : if speak : jfw . SayString ( text , int ( bool ( interrupt ))) if braille : jfw . RunFunction ( 'BrailleString(\" {text} \")' . format ( text = text . replace ( '\"' , \"'\" ))) Method jfw_running ( self ) \u00b6 Determines if JFW is running. Returns: Type Description bool True if JFW is running, False otherwise. Source code in speechlight/windows.py def jfw_running ( self ) -> bool : \"\"\" Determines if JFW is running. Returns: True if JFW is running, False otherwise. \"\"\" return bool ( self . find_window ( \"JFWUI2\" , None )) Method jfw_say ( self , text , interrupt = None ) \u00b6 Speak text using JFW. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def jfw_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using JFW. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" self . jfw_output ( text , speak = True , interrupt = interrupt ) Method jfw_silence ( self ) \u00b6 Cancels JFW speech and flushes the speech buffer. Source code in speechlight/windows.py def jfw_silence ( self ) -> None : \"\"\"Cancels JFW speech and flushes the speech buffer.\"\"\" jfw = self . jfw if jfw is not None : jfw . StopSpeech () Method nvda_braille ( self , text ) \u00b6 Brailles text using NVDA. Parameters: Name Type Description Default text str The text to braille. required Source code in speechlight/windows.py def nvda_braille ( self , text : str ) -> None : \"\"\" Brailles text using NVDA. Args: text: The text to braille. \"\"\" self . nvda . nvdaController_brailleMessage ( text ) Method nvda_output ( self , text , interrupt = None ) \u00b6 Outputs text using NVDA. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def nvda_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using NVDA. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . nvda_say ( text , interrupt ) self . nvda_braille ( text ) Method nvda_running ( self ) \u00b6 Determines if NVDA is running. Returns: Type Description bool True if NVDA is running, False otherwise. Source code in speechlight/windows.py def nvda_running ( self ) -> bool : \"\"\" Determines if NVDA is running. Returns: True if NVDA is running, False otherwise. \"\"\" return bool ( self . nvda . nvdaController_testIfRunning () == 0 ) Method nvda_say ( self , text , interrupt = None ) \u00b6 Speak text using NVDA. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def nvda_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using NVDA. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . nvda_silence () self . nvda . nvdaController_speakText ( text ) Method nvda_silence ( self ) \u00b6 Cancels NVDA speech and flushes the speech buffer. Source code in speechlight/windows.py def nvda_silence ( self ) -> None : \"\"\"Cancels NVDA speech and flushes the speech buffer.\"\"\" self . nvda . nvdaController_cancelSpeech () Method output ( self , text , interrupt = None ) \u00b6 Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_output ( text , interrupt ) elif self . sa_running (): self . sa_output ( text , interrupt ) elif self . jfw_running (): self . jfw_output ( text , braille = True , speak = True , interrupt = interrupt ) else : self . sapi_say ( text , interrupt ) Method sa_braille ( self , text ) \u00b6 Brailles text using System Access. Parameters: Name Type Description Default text str The text to braille. required Source code in speechlight/windows.py def sa_braille ( self , text : str ) -> None : \"\"\" Brailles text using System Access. Args: text: The text to braille. \"\"\" self . sa . SA_BrlShowTextW ( text ) Method sa_output ( self , text , interrupt = None ) \u00b6 Outputs text using System Access. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def sa_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using System Access. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . sa_say ( text , interrupt ) self . sa_braille ( text ) Method sa_running ( self ) \u00b6 Determines if System Access is running. Returns: Type Description bool True if System Access is running, False otherwise. Source code in speechlight/windows.py def sa_running ( self ) -> bool : \"\"\" Determines if System Access is running. Returns: True if System Access is running, False otherwise. \"\"\" return bool ( self . sa . SA_IsRunning ()) Method sa_say ( self , text , interrupt = None ) \u00b6 Speak text using System Access. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def sa_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using System Access. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . sa_silence () self . sa . SA_SayW ( text ) Method sa_silence ( self ) \u00b6 Cancels System Access speech and flushes the speech buffer. Source code in speechlight/windows.py def sa_silence ( self ) -> None : \"\"\"Cancels System Access speech and flushes the speech buffer.\"\"\" self . sa . SA_StopAudio () Method sapi_say ( self , text , interrupt = None ) \u00b6 Speak text using SAPI. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def sapi_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using SAPI. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if self . sapi is not None : if interrupt : self . sapi . Speak ( text , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) else : self . sapi . Speak ( text , SPF_ASYNC | SPF_IS_NOT_XML ) Method sapi_silence ( self ) \u00b6 Cancels SAPI speech and flushes the speech buffer. Source code in speechlight/windows.py def sapi_silence ( self ) -> None : \"\"\"Cancels SAPI speech and flushes the speech buffer.\"\"\" if self . sapi is not None : self . sapi . Speak ( \"\" , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) Method say ( self , text , interrupt = None ) \u00b6 Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_say ( text , interrupt ) elif self . sa_running (): self . sa_say ( text , interrupt ) elif self . jfw_running (): self . jfw_say ( text , interrupt ) else : self . sapi_say ( text , interrupt ) Method silence ( self ) \u00b6 Cancels speech and flushes the speech buffer. Source code in speechlight/windows.py def silence ( self ) -> None : if self . nvda_running (): self . nvda_silence () elif self . sa_running (): self . sa_silence () elif self . jfw_running (): self . jfw_silence () else : self . sapi_silence () Method speaking ( self ) \u00b6 Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/windows.py def speaking ( self ) -> bool : if self . nvda_running () or self . sa_running () or self . jfw_running (): # None of the screen reader APIs support retrieving speaking status. return False elif self . sapi is not None : return bool ( self . sapi . Status . RunningState != 1 ) return False","title":"windows.py"},{"location":"api/windows/#speechlight.windows","text":"","title":"windows"},{"location":"api/windows/#speechlight.windows.Speech","text":"Source code in speechlight/windows.py class Speech ( BaseSpeech ): def __init__ ( self ) -> None : # pragma: no cover self . _sapi : Optional [ Any ] = None self . _jfw : Optional [ Any ] = None if sys . platform == \"win32\" : self . find_window : ctypes . _NamedFuncPointer = ctypes . WinDLL ( \"user32\" ) . FindWindowW self . find_window . argtypes = [ ctypes . c_wchar_p , ctypes . c_wchar_p ] self . find_window . restype = ctypes . c_void_p self . nvda : ctypes . WinDLL self . sa : ctypes . WinDLL if SYSTEM_ARCHITECTURE == \"32bit\" : self . nvda = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"nvdaControllerClient32.dll\" ) ) self . sa = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"SAAPI32.dll\" )) else : self . nvda = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"nvdaControllerClient64.dll\" ) ) self . sa = ctypes . windll . LoadLibrary ( os . path . join ( LIB_DIRECTORY , \"SAAPI64.dll\" )) self . nvda . nvdaController_brailleMessage . argtypes = ( ctypes . c_wchar_p ,) self . nvda . nvdaController_speakText . argtypes = ( ctypes . c_wchar_p ,) self . sa . SA_BrlShowTextW . argtypes = ( ctypes . c_wchar_p ,) self . sa . SA_SayW . argtypes = ( ctypes . c_wchar_p ,) else : self . find_window : Callable [ ... , None ] = lambda * args : None self . nvda = MockNVDA () self . sa = MockSA () @property def sapi ( self ) -> Any : # type: ignore[misc] # pragma: no cover \"\"\"The SAPI COM object.\"\"\" if sys . platform == \"win32\" : with suppress ( ComError ): self . _sapi = win32com . client . Dispatch ( \"SAPI.SpVoice\" ) return self . _sapi @property def jfw ( self ) -> Any : # type: ignore[misc] # pragma: no cover \"\"\"The JFW COM object.\"\"\" if sys . platform == \"win32\" : with suppress ( ComError ): self . _jfw = win32com . client . Dispatch ( \"FreedomSci.JawsApi\" ) return self . _jfw def jfw_braille ( self , text : str ) -> None : \"\"\" Brailles text using JFW. Args: text: The text to braille. \"\"\" self . jfw_output ( text , braille = True ) def jfw_output ( self , text : str , braille : Optional [ bool ] = None , speak : Optional [ bool ] = None , interrupt : Optional [ bool ] = None , ) -> None : \"\"\" Outputs text using JFW. Args: text: The output text. braille: Output text in braille. speak: Output text using speech. interrupt: True if the speech should be silenced before speaking. \"\"\" jfw = self . jfw if jfw is not None : if speak : jfw . SayString ( text , int ( bool ( interrupt ))) if braille : jfw . RunFunction ( 'BrailleString(\" {text} \")' . format ( text = text . replace ( '\"' , \"'\" ))) def jfw_running ( self ) -> bool : \"\"\" Determines if JFW is running. Returns: True if JFW is running, False otherwise. \"\"\" return bool ( self . find_window ( \"JFWUI2\" , None )) def jfw_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using JFW. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" self . jfw_output ( text , speak = True , interrupt = interrupt ) def jfw_silence ( self ) -> None : \"\"\"Cancels JFW speech and flushes the speech buffer.\"\"\" jfw = self . jfw if jfw is not None : jfw . StopSpeech () def nvda_braille ( self , text : str ) -> None : \"\"\" Brailles text using NVDA. Args: text: The text to braille. \"\"\" self . nvda . nvdaController_brailleMessage ( text ) def nvda_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using NVDA. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . nvda_say ( text , interrupt ) self . nvda_braille ( text ) def nvda_running ( self ) -> bool : \"\"\" Determines if NVDA is running. Returns: True if NVDA is running, False otherwise. \"\"\" return bool ( self . nvda . nvdaController_testIfRunning () == 0 ) def nvda_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using NVDA. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . nvda_silence () self . nvda . nvdaController_speakText ( text ) def nvda_silence ( self ) -> None : \"\"\"Cancels NVDA speech and flushes the speech buffer.\"\"\" self . nvda . nvdaController_cancelSpeech () def sa_braille ( self , text : str ) -> None : \"\"\" Brailles text using System Access. Args: text: The text to braille. \"\"\" self . sa . SA_BrlShowTextW ( text ) def sa_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using System Access. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . sa_say ( text , interrupt ) self . sa_braille ( text ) def sa_running ( self ) -> bool : \"\"\" Determines if System Access is running. Returns: True if System Access is running, False otherwise. \"\"\" return bool ( self . sa . SA_IsRunning ()) def sa_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using System Access. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . sa_silence () self . sa . SA_SayW ( text ) def sa_silence ( self ) -> None : \"\"\"Cancels System Access speech and flushes the speech buffer.\"\"\" self . sa . SA_StopAudio () def sapi_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using SAPI. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if self . sapi is not None : if interrupt : self . sapi . Speak ( text , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) else : self . sapi . Speak ( text , SPF_ASYNC | SPF_IS_NOT_XML ) def sapi_silence ( self ) -> None : \"\"\"Cancels SAPI speech and flushes the speech buffer.\"\"\" if self . sapi is not None : self . sapi . Speak ( \"\" , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) def braille ( self , text : str ) -> None : if self . nvda_running (): self . nvda_braille ( text ) elif self . sa_running (): self . sa_braille ( text ) elif self . jfw_running (): self . jfw_braille ( text ) def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_output ( text , interrupt ) elif self . sa_running (): self . sa_output ( text , interrupt ) elif self . jfw_running (): self . jfw_output ( text , braille = True , speak = True , interrupt = interrupt ) else : self . sapi_say ( text , interrupt ) def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_say ( text , interrupt ) elif self . sa_running (): self . sa_say ( text , interrupt ) elif self . jfw_running (): self . jfw_say ( text , interrupt ) else : self . sapi_say ( text , interrupt ) def silence ( self ) -> None : if self . nvda_running (): self . nvda_silence () elif self . sa_running (): self . sa_silence () elif self . jfw_running (): self . jfw_silence () else : self . sapi_silence () def speaking ( self ) -> bool : if self . nvda_running () or self . sa_running () or self . jfw_running (): # None of the screen reader APIs support retrieving speaking status. return False elif self . sapi is not None : return bool ( self . sapi . Status . RunningState != 1 ) return False","title":"Speech"},{"location":"api/windows/#speechlight.windows.Speech.jfw","text":"The JFW COM object.","title":"jfw"},{"location":"api/windows/#speechlight.windows.Speech.sapi","text":"The SAPI COM object.","title":"sapi"},{"location":"api/windows/#speechlight.windows.Speech.braille","text":"Brailles text. Parameters: Name Type Description Default text str The text to be brailled. required Source code in speechlight/windows.py def braille ( self , text : str ) -> None : if self . nvda_running (): self . nvda_braille ( text ) elif self . sa_running (): self . sa_braille ( text ) elif self . jfw_running (): self . jfw_braille ( text )","title":"braille()"},{"location":"api/windows/#speechlight.windows.Speech.jfw_braille","text":"Brailles text using JFW. Parameters: Name Type Description Default text str The text to braille. required Source code in speechlight/windows.py def jfw_braille ( self , text : str ) -> None : \"\"\" Brailles text using JFW. Args: text: The text to braille. \"\"\" self . jfw_output ( text , braille = True )","title":"jfw_braille()"},{"location":"api/windows/#speechlight.windows.Speech.jfw_output","text":"Outputs text using JFW. Parameters: Name Type Description Default text str The output text. required braille Optional[bool] Output text in braille. None speak Optional[bool] Output text using speech. None interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def jfw_output ( self , text : str , braille : Optional [ bool ] = None , speak : Optional [ bool ] = None , interrupt : Optional [ bool ] = None , ) -> None : \"\"\" Outputs text using JFW. Args: text: The output text. braille: Output text in braille. speak: Output text using speech. interrupt: True if the speech should be silenced before speaking. \"\"\" jfw = self . jfw if jfw is not None : if speak : jfw . SayString ( text , int ( bool ( interrupt ))) if braille : jfw . RunFunction ( 'BrailleString(\" {text} \")' . format ( text = text . replace ( '\"' , \"'\" )))","title":"jfw_output()"},{"location":"api/windows/#speechlight.windows.Speech.jfw_running","text":"Determines if JFW is running. Returns: Type Description bool True if JFW is running, False otherwise. Source code in speechlight/windows.py def jfw_running ( self ) -> bool : \"\"\" Determines if JFW is running. Returns: True if JFW is running, False otherwise. \"\"\" return bool ( self . find_window ( \"JFWUI2\" , None ))","title":"jfw_running()"},{"location":"api/windows/#speechlight.windows.Speech.jfw_say","text":"Speak text using JFW. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def jfw_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using JFW. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" self . jfw_output ( text , speak = True , interrupt = interrupt )","title":"jfw_say()"},{"location":"api/windows/#speechlight.windows.Speech.jfw_silence","text":"Cancels JFW speech and flushes the speech buffer. Source code in speechlight/windows.py def jfw_silence ( self ) -> None : \"\"\"Cancels JFW speech and flushes the speech buffer.\"\"\" jfw = self . jfw if jfw is not None : jfw . StopSpeech ()","title":"jfw_silence()"},{"location":"api/windows/#speechlight.windows.Speech.nvda_braille","text":"Brailles text using NVDA. Parameters: Name Type Description Default text str The text to braille. required Source code in speechlight/windows.py def nvda_braille ( self , text : str ) -> None : \"\"\" Brailles text using NVDA. Args: text: The text to braille. \"\"\" self . nvda . nvdaController_brailleMessage ( text )","title":"nvda_braille()"},{"location":"api/windows/#speechlight.windows.Speech.nvda_output","text":"Outputs text using NVDA. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def nvda_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using NVDA. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . nvda_say ( text , interrupt ) self . nvda_braille ( text )","title":"nvda_output()"},{"location":"api/windows/#speechlight.windows.Speech.nvda_running","text":"Determines if NVDA is running. Returns: Type Description bool True if NVDA is running, False otherwise. Source code in speechlight/windows.py def nvda_running ( self ) -> bool : \"\"\" Determines if NVDA is running. Returns: True if NVDA is running, False otherwise. \"\"\" return bool ( self . nvda . nvdaController_testIfRunning () == 0 )","title":"nvda_running()"},{"location":"api/windows/#speechlight.windows.Speech.nvda_say","text":"Speak text using NVDA. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def nvda_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using NVDA. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . nvda_silence () self . nvda . nvdaController_speakText ( text )","title":"nvda_say()"},{"location":"api/windows/#speechlight.windows.Speech.nvda_silence","text":"Cancels NVDA speech and flushes the speech buffer. Source code in speechlight/windows.py def nvda_silence ( self ) -> None : \"\"\"Cancels NVDA speech and flushes the speech buffer.\"\"\" self . nvda . nvdaController_cancelSpeech ()","title":"nvda_silence()"},{"location":"api/windows/#speechlight.windows.Speech.output","text":"Speaks and brailles text. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_output ( text , interrupt ) elif self . sa_running (): self . sa_output ( text , interrupt ) elif self . jfw_running (): self . jfw_output ( text , braille = True , speak = True , interrupt = interrupt ) else : self . sapi_say ( text , interrupt )","title":"output()"},{"location":"api/windows/#speechlight.windows.Speech.sa_braille","text":"Brailles text using System Access. Parameters: Name Type Description Default text str The text to braille. required Source code in speechlight/windows.py def sa_braille ( self , text : str ) -> None : \"\"\" Brailles text using System Access. Args: text: The text to braille. \"\"\" self . sa . SA_BrlShowTextW ( text )","title":"sa_braille()"},{"location":"api/windows/#speechlight.windows.Speech.sa_output","text":"Outputs text using System Access. Parameters: Name Type Description Default text str The output text. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def sa_output ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Outputs text using System Access. Args: text: The output text. interrupt: True if the speech should be silenced before speaking. \"\"\" self . sa_say ( text , interrupt ) self . sa_braille ( text )","title":"sa_output()"},{"location":"api/windows/#speechlight.windows.Speech.sa_running","text":"Determines if System Access is running. Returns: Type Description bool True if System Access is running, False otherwise. Source code in speechlight/windows.py def sa_running ( self ) -> bool : \"\"\" Determines if System Access is running. Returns: True if System Access is running, False otherwise. \"\"\" return bool ( self . sa . SA_IsRunning ())","title":"sa_running()"},{"location":"api/windows/#speechlight.windows.Speech.sa_say","text":"Speak text using System Access. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def sa_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using System Access. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if interrupt : self . sa_silence () self . sa . SA_SayW ( text )","title":"sa_say()"},{"location":"api/windows/#speechlight.windows.Speech.sa_silence","text":"Cancels System Access speech and flushes the speech buffer. Source code in speechlight/windows.py def sa_silence ( self ) -> None : \"\"\"Cancels System Access speech and flushes the speech buffer.\"\"\" self . sa . SA_StopAudio ()","title":"sa_silence()"},{"location":"api/windows/#speechlight.windows.Speech.sapi_say","text":"Speak text using SAPI. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def sapi_say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : \"\"\" Speak text using SAPI. Args: text: The text to be spoken. interrupt: True if the speech should be silenced before speaking. \"\"\" if self . sapi is not None : if interrupt : self . sapi . Speak ( text , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML ) else : self . sapi . Speak ( text , SPF_ASYNC | SPF_IS_NOT_XML )","title":"sapi_say()"},{"location":"api/windows/#speechlight.windows.Speech.sapi_silence","text":"Cancels SAPI speech and flushes the speech buffer. Source code in speechlight/windows.py def sapi_silence ( self ) -> None : \"\"\"Cancels SAPI speech and flushes the speech buffer.\"\"\" if self . sapi is not None : self . sapi . Speak ( \"\" , SPF_ASYNC | SPF_PURGE_BEFORE_SPEAK | SPF_IS_NOT_XML )","title":"sapi_silence()"},{"location":"api/windows/#speechlight.windows.Speech.say","text":"Speaks text. Parameters: Name Type Description Default text str The text to be spoken. required interrupt Optional[bool] True if the speech should be silenced before speaking. None Source code in speechlight/windows.py def say ( self , text : str , interrupt : Optional [ bool ] = None ) -> None : if self . nvda_running (): self . nvda_say ( text , interrupt ) elif self . sa_running (): self . sa_say ( text , interrupt ) elif self . jfw_running (): self . jfw_say ( text , interrupt ) else : self . sapi_say ( text , interrupt )","title":"say()"},{"location":"api/windows/#speechlight.windows.Speech.silence","text":"Cancels speech and flushes the speech buffer. Source code in speechlight/windows.py def silence ( self ) -> None : if self . nvda_running (): self . nvda_silence () elif self . sa_running (): self . sa_silence () elif self . jfw_running (): self . jfw_silence () else : self . sapi_silence ()","title":"silence()"},{"location":"api/windows/#speechlight.windows.Speech.speaking","text":"Determines if text is currently being spoken. Returns: Type Description bool True if text is currently being spoken, False otherwise. Source code in speechlight/windows.py def speaking ( self ) -> bool : if self . nvda_running () or self . sa_running () or self . jfw_running (): # None of the screen reader APIs support retrieving speaking status. return False elif self . sapi is not None : return bool ( self . sapi . Status . RunningState != 1 ) return False","title":"speaking()"}]}